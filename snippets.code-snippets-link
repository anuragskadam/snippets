{
  // Place your CF workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Segment Tree": {
    "scope": "cpp",
    "prefix": "/segment_tree",
    "body": [
      "",
      "template<typename T>",
      "class segment_tree {",
      "    int original_arr_size = -1;",
      "    int tree_size = -1;",
      "    int get_next_2pow (int inp) {",
      "        int curr = 1;",
      "        while (curr < inp) {",
      "            curr <<= 1;",
      "        }",
      "        return curr;",
      "    }",
      "    inline int parent(int idx) {",
      "        return idx >> 1;",
      "    }",
      "    inline int left_ch(int idx) {",
      "        return idx << 1;",
      "    }",
      "    inline int right_ch(int idx) {",
      "        return (idx << 1) + 1;",
      "    }",
      "",
      "    // configurables",
      "    function<T(T, T)> func;",
      "    T default_value;",
      "    //",
      "",
      "    inline T _ask_node(int left_query, int right_query, int node_idx, int node_left, int node_right) {",
      "        if (left_query <= node_left && right_query >= node_right) {",
      "            // complete overlap",
      "            return tree[node_idx];",
      "        }",
      "        if (left_query > node_right || right_query < node_left) {",
      "            // disjoint",
      "            return default_value;",
      "        }",
      "        auto mid = (node_left + node_right) >> 1;",
      "        return func(",
      "            _ask_node(left_query, right_query, left_ch(node_idx), node_left, mid)",
      "            , _ask_node(left_query, right_query, right_ch(node_idx), mid + 1, node_right)",
      "        );",
      "    }",
      "    inline void _update_node (int tree_idx) {",
      "        if (!tree_idx) return;",
      "        tree[tree_idx] = func(tree[left_ch(tree_idx)], tree[right_ch(tree_idx)]);",
      "    }",
      "",
      "    public:",
      "    int leaves = -1;",
      "    vector<T> tree;",
      "    segment_tree() {}",
      "    segment_tree(const int size_in, function<T(T, T)> func_in, T default_val_in) {",
      "        func = func_in;",
      "        default_value = default_val_in;",
      "        original_arr_size = size_in;",
      "        leaves = get_next_2pow(original_arr_size);",
      "        tree_size = leaves << 1;",
      "        tree = vector<T>(tree_size, default_value);",
      "    }",
      "    segment_tree(const vector<T> &vec, function<T(T, T)> func_in, T default_val_in) {",
      "        func = func_in;",
      "        default_value = default_val_in;",
      "        original_arr_size = vec.size();",
      "        leaves = get_next_2pow(original_arr_size);",
      "        tree_size = leaves << 1;",
      "        tree = vector<T>(tree_size, default_value);",
      "        for (int i = 0; i < original_arr_size; i++) {",
      "            tree[leaves + i] = vec[i];",
      "        }",
      "        for (int i = leaves - 1; i > 0; i--) {",
      "            _update_node(i);",
      "        }",
      "    }",
      "    void point_update(int idx, T value) {",
      "        assert(0 <= idx && idx < original_arr_size);",
      "        tree[leaves + idx] = value;",
      "        int curr_tree_idx = parent(leaves + idx);",
      "        while (curr_tree_idx) {",
      "            _update_node(curr_tree_idx);",
      "            curr_tree_idx = parent(curr_tree_idx);",
      "        }",
      "    }",
      "    T operator()(int left_idx, int right_idx) {",
      "        // inclusive and 0-indexed",
      "        assert(left_idx >= 0 && right_idx < original_arr_size && left_idx <= right_idx);",
      "        return _ask_node(left_idx, right_idx, 1, 0, leaves - 1);",
      "    }",
      "    const T& operator[](int idx) const {",
      "        assert(0 <= idx && idx < original_arr_size);",
      "        return tree[leaves + idx];",
      "    }",
      "};",
      "$0"
    ],
    "description": "Inserts Segment Tree code snippet"
  },
  "DSU": {
    "scope": "cpp",
    "prefix": "/dsu",
    "body": [
      "",
      "class dsu {",
      "    // zero_indexed",
      "    vector<int> _pars;",
      "    int _size;",
      "    int _connected_compnents;",
      "    vector<int> _size_of_par; // initialised with each value 1",
      "    public:",
      "    dsu (int size) {",
      "        _pars = vector<int>(size);",
      "        _size_of_par = vector<int>(size, 1);",
      "        _size = size;",
      "        for (int i = 0; i < _size; i++) {",
      "            _pars[i] = i;",
      "        }",
      "        _connected_compnents = size;",
      "    }",
      "    inline int size() {",
      "        return _size;",
      "    }",
      "    int par(int node) {",
      "        if (_pars[node] != node) {",
      "            _pars[node] = par(_pars[node]);",
      "        }",
      "        return _pars[node];",
      "    }",
      "    bool unite(int n1, int n2) {",
      "        // returns true if n1 and n2 belong to diff grps",
      "        int p1 = par(n1), p2 = par(n2);",
      "        if (p1 != p2) {",
      "            if (_size_of_par[p1] < _size_of_par[p2]) {",
      "                swap(p1, p2);",
      "                swap(n1, n2);",
      "            }",
      "            _pars[p2] = p1;",
      "            _size_of_par[p1] += _size_of_par[p2];",
      "            _connected_compnents--;",
      "            return true;",
      "        }",
      "        return false;",
      "    }",
      "    inline int size_of_grp(int node) {",
      "        // returns size of group of `node`",
      "        return _size_of_par[par(node)];",
      "    }",
      "    inline int connected_comps() {",
      "        // returns number of connected components",
      "        return _connected_compnents;",
      "    }",
      "};",
      "$0"
    ],
    "description": "Disjoint Set Union Algorithm"
  },
  "Get Prime Set": {
    "scope": "cpp",
    "prefix": "/primes",
    "body": [
      "",
      "set<int> GetPrimeSet (int lim) {",
      "    // returns a set of prime numbers till `lim` (inclusive)",
      "    vector<bool> composite(lim + 1); composite[0] = composite[1] = true;",
      "    set<int> primes;",
      "    for (long long i = 2; i <= lim; i++) {",
      "        if (!composite[i]) {",
      "            primes.insert(i);",
      "            for (long long j = i * i; j <= lim; j += i) {",
      "                composite[j] = true;",
      "            }",
      "        }",
      "    }",
      "    return primes;",
      "}",
      "",
      "auto primes = GetPrimeSet($0);",
      ""
    ],
    "description": "Returns a set of prime numbers till `lim` (inclusive)"
  },
  "Factors": {
    "scope": "cpp",
    "prefix": "/factors",
    "body": [
      "",
      "// returns set by reference",
      "set<long long>& FactorsRef(long long num) {",
      "    static map<long long, set<long long>> saved_factors;",
      "    assert(num > 0);",
      "    if (saved_factors.contains(num)) return saved_factors[num];",
      "    set<long long> res;",
      "    long long sqr = sqrt(num);",
      "    while(sqr * sqr > num) sqr--;",
      "    while ((sqr + 1) * (sqr + 1) <= num) sqr++;",
      "    for (long long i = 1; i <= sqr; i++) {",
      "        if (num % i == 0) {",
      "            res.insert(i);",
      "            res.insert(num / i);",
      "        }",
      "    }",
      "    return saved_factors[num] = res;",
      "}",
      "$0"
    ],
    "description": "Returns a set of factors of the input number"
  },
  "GCD": {
    "scope": "cpp",
    "prefix": "/gcd",
    "body": [
      "",
      "template<typename T>",
      "inline T Gcd(T a, T b) {",
      "    if (b > a) swap(a, b);",
      "    assert(b >= 0);",
      "    while (b) {",
      "        a %= b;",
      "        swap(a, b);",
      "    }",
      "    return a;",
      "}",
      "$0"
    ],
    "description": "Returns GCD of input numbers"
  },
  "Log2": {
    "scope": "cpp",
    "prefix": "/log2",
    "body": [
      "",
      "// Floor of log2; index of highest 1-bit",
      "inline int Log2(int num) {",
      "    assert(num > 0);",
      "    return bit_width(unsigned(num)) - 1;",
      "}",
      "$0"
    ],
    "description": ""
  },
  "Log": {
    "scope": "cpp",
    "prefix": "/log",
    "body": [
      "",
      "int Log(long long num, int base) {",
      "    assert(num > 0 && base > 1);",
      "    int res = -1;",
      "    while (num) {",
      "        res++;",
      "        num /= base;",
      "    }",
      "    return res;",
      "}",
      "$0"
    ],
    "description": ""
  },
  "Sqrt": {
    "scope": "cpp",
    "prefix": "/sqrt",
    "body": [
      "",
      "long long Sqrt(long long num) {",
      "    assert(num >= 0);",
      "    long long sq = sqrt(num);",
      "    while(sq * sq > num) sq--;",
      "    while ((sq + 1) * (sq + 1) <= num) sq++;",
      "    return sq;",
      "}",
      "$0"
    ],
    "description": ""
  },
  "Mod": {
    "scope": "cpp",
    "prefix": "/mod",
    "body": [
      "",
      "constexpr long long mod = $0;",
      "inline long long Mod(long long num) {",
      "    num %= mod;",
      "    return num < 0 ? num + mod : num;",
      "}",
      "",
      "inline long long Inv(long long num) {",
      "    assert(num > 0);",
      "    num %= mod;",
      "    long long p = mod - 2;",
      "    long long res = 1;",
      "    while (p) {",
      "        if (p & 1) {",
      "            res *= num;",
      "            res %= mod;",
      "        }",
      "        num *= num;",
      "        num %= mod;",
      "        p >>= 1;",
      "    }",
      "    return res;",
      "}",
      "",
      "inline long long Add(long long a, long long b) {",
      "    return Mod(Mod(a) + Mod(b));",
      "}",
      "",
      "inline long long Sub(long long a, long long b) {",
      "    return Mod(Mod(a) - Mod(b));",
      "}",
      "",
      "inline long long Mul(long long a, long long b) {",
      "    return Mod(Mod(a) * Mod(b));",
      "}",
      "",
      "inline long long Div(long long a, long long b) {",
      "    return (Mod(a) * Inv(b)) % mod;",
      "}",
      ""
    ],
    "description": ""
  },
  "Power": {
    "scope": "cpp",
    "prefix": "/pow",
    "body": [
      "",
      "inline long long Pow(long long num, long long p) {",
      "    assert(num >= 0 && p >= 0);",
      "    num %= mod;",
      "    long long res = 1;",
      "    while (p) {",
      "        if (p & 1) {",
      "            res *= num;",
      "            res %= mod;",
      "        }",
      "        num *= num;",
      "        num %= mod;",
      "        p >>= 1;",
      "    }",
      "    return res;",
      "}",
      "$0"
    ],
    "description": ""
  },
  "InRange": {
    "scope": "cpp",
    "prefix": "/inrange",
    "body": [
      "",
      "inline bool InRange(long long i, long long n) {",
      "    return 0 <= i && i < n;",
      "}",
      "$0"
    ],
    "description": ""
  },
  "dirs": {
    "scope": "cpp",
    "prefix": "/dirs",
    "body": [
      "constexpr array<pair<int, int>, 4> dirs = {{ {0, 1}, {1, 0}, {0, -1}, {-1, 0} }};$0"
    ],
    "description": ""
  },
  "if ASK_DEBUG defined": {
    "scope": "cpp",
    "prefix": "/ask",
    "body": [
      "#ifdef ASK_DEBUG",
      "$0",
      "#endif"
    ],
    "description": ""
  },
  "2D vector": {
    "scope": "cpp",
    "prefix": "/v2",
    "body": [
      "vector<vector<$1>> $2($3, vector<$1>($4, $5));$0",
    ],
    "description": ""
  },
  "3D vector": {
    "scope": "cpp",
    "prefix": "/v3",
    "body": [
      "vector<vector<vector<$1>>> $2($3, vector<vector<$1>>($4, vector<$1> ($5, $6)));$0",
    ],
    "description": ""
  },
  "min heap priority queue": {
    "scope": "cpp",
    "prefix": "/rpq",
    "body": [
      "priority_queue<$1, vector<$1>, greater<$1>>",
    ],
    "description": ""
  },
  "Factorials": {
    "scope": "cpp",
    "prefix": "/factorials",
    "body": [
      "",
      "inline long long Factorial(int num) {",
      "    static const int lim = $0;",
      "    static vector<long long> factorials(lim + 1, 1);",
      "    static const bool done = [](vector<long long> &f) {",
      "        for (int i = 2; i <= lim; ++i)",
      "            f[i] = (f[i - 1] * i) % mod;",
      "        return true;",
      "    }(factorials);",
      "    return factorials[num];",
      "}",
      ""
    ],
    "description": ""
  },
  "Pragma Optimization": {
    "scope": "cpp",
    "prefix": "/pragma",
    "body": [
      "#pragma GCC optimize(\"Ofast,unroll-loops\")$0"
    ],
    "description": ""
  },
  "Matrix Operations": {
    "scope": "cpp",
    "prefix": "/matrix",
    "body": [
      "",
      "vector<vector<long long>> MatMul (const vector<vector<long long>> &mat1, const vector<vector<long long>> &mat2) {",
      "    size_t n1 = mat1.size(), m1 = mat1.front().size();",
      "    size_t n2 = mat2.size(), m2 = mat2.front().size();",
      "    assert(m1 == n2);",
      "    vector<vector<long long>> res(n1, vector<long long> (m2));",
      "    for (int i = 0; i < n1; i++) {",
      "        for (int j = 0; j < m2; j++) {",
      "            for (int k = 0; k < m1; k++) {",
      "                res[i][j] = (res[i][j] + Mod(Mod(mat1[i][k]) * Mod(mat2[k][j]))) % mod;",
      "            }",
      "        }",
      "    }",
      "    return res;",
      "}",
      "",
      "vector<vector<long long>> MatPow(vector<vector<long long>> mat, long long p) {",
      "    assert(mat.size() == mat[0].size());",
      "    const size_t mat_size = mat.size();",
      "    vector<vector<long long>> res(mat_size, vector<long long> (mat_size));",
      "    for (int i = 0; i < mat_size; i++) res[i][i] = 1;",
      "    while (p) {",
      "        if (p & 1) {",
      "            res = MatMul(res, mat);",
      "        }",
      "        mat = MatMul(mat, mat);",
      "        p >>= 1;",
      "    }",
      "    return res;",
      "}",
      "$0"
    ],
    "description": ""
  },
  "Factorials (Compile-Time)": {
    "scope": "cpp",
    "prefix": "/compile_factorials",
    "body": [
      "",
      "constexpr int _lim_factorial = $0; // dont have this above 262144",
      "constexpr array<long long, _lim_factorial + 1> _factorials = []() {",
      "    array<long long, _lim_factorial + 1> f = {1};",
      "    for (int i = 1; i <= _lim_factorial; ++i) {",
      "        f[i] = (f[i - 1] * i) % mod;",
      "    }",
      "    return f;",
      "}();",
      "inline long long Factorial(int num) {",
      "    return _factorials[num];",
      "}",
      ""
    ],
    "description": ""
  },
  "Combinations": {
    "scope": "cpp",
    "prefix": "/comb",
    "body": [
      "",
      "inline long long Comb(int n, int r) {",
      "    return (Factorial(n) * Inv(Factorial(r) * Factorial(n - r))) % mod;",
      "}",
      ""
    ],
    "description": ""
  },
  "Fenwick Tree": {
    "scope": "cpp",
    "prefix": "/fenwick",
    "body": [
      "",
      "template<typename T>",
      "class fenwick {",
      "    size_t _size = 0;",
      "    vector<T> fenwick_arr;",
      "public:",
      "    vector<T> nums;",
      "    fenwick() {}",
      "    fenwick(vector<T>& nums_in) {",
      "        _size = nums_in.size();",
      "        nums = vector<T>(_size);",
      "        fenwick_arr = vector<T>(_size + 1);",
      "        for (int i = 0; i < _size; i++) {",
      "            update(i, nums_in[i]);",
      "        }",
      "    }",
      "    fenwick(vector<T>&& nums_in) {",
      "        _size = nums_in.size();",
      "        nums = vector<T>(_size);",
      "        fenwick_arr = vector<T>(_size + 1);",
      "        for (int i = 0; i < _size; i++) {",
      "            update(i, nums_in[i]);",
      "        }",
      "    }",
      "    fenwick(size_t length) {",
      "        // make a blank fenwick tree with `length` entries (all set to ZERO)",
      "        _size = length;",
      "        nums = vector<T>(_size);",
      "        fenwick_arr = vector<T>(_size + 1);",
      "    }",
      "",
      "    size_t size() {",
      "        return _size;",
      "    }",
      "    ",
      "    // customiseable operators",
      "    T operator_fenwick(T inp1, T inp2) {",
      "        return inp1 + inp2;",
      "    }",
      "    T inverted_operator_fenwick(T inp1, T inp2) {",
      "        return inp1 - inp2;",
      "    }",
      "    //",
      "",
      "    void update(size_t index, T val) {",
      "        T prev = nums[index];",
      "        nums[index] = val;",
      "        T diff = inverted_operator_fenwick(nums[index], prev);",
      "        index++;",
      "        while (index <= nums.size()) {",
      "            fenwick_arr[index] = operator_fenwick(fenwick_arr[index], diff);",
      "            index += index & (-index);",
      "        }",
      "    }",
      "    T get_pref(size_t idx) {",
      "        size_t f_idx = idx + 1;",
      "        T ans = 0;",
      "        while (f_idx) {",
      "            ans = operator_fenwick(ans, fenwick_arr[f_idx]);",
      "            f_idx -= f_idx & (-f_idx);",
      "        }",
      "        return ans;",
      "    }",
      "    T get_range_sum(size_t left, size_t right) {",
      "        return inverted_operator_fenwick(get_pref(right), get_pref(left - 1));",
      "    }",
      "};",
      ""
    ],
    "description": ""
  }
}